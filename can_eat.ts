// import {}

// import {HandlerResponse, MessageHandler, ReqRequest} from "./index";

import {HandlerResponse, MessageHandler, ReqRequest} from "./types";

const tasty = [
    "üçá –í–∏–Ω–æ–≥—Ä–∞–¥",
"üçà –î—ã–Ω—è",
"üçâ –ê—Ä–±—É–∑",
"üçä –ê–ø–µ–ª—å—Å–∏–Ω",
"üçã –õ–∏–º–æ–Ω",
"üçå –ë–∞–Ω–∞–Ω",
"üçç –ê–Ω–∞–Ω–∞—Å",
"ü•≠ –ú–∞–Ω–≥–æ",
"üçé –Ø–±–ª–æ–∫–æ",
]
const not_tasty = [
    "üöó –ú–∞—à–∏–Ω—É",
    "üí© –ö–∞–∫–∞—à–∫—É",
    "üèòÔ∏è –î–æ–º",
    "‚è∞ –ß–∞—Å—ã",
    "üë® –ß–µ–ª–æ–≤–µ–∫–∞"
]


export class EatHandler extends MessageHandler{
    gameOver: boolean = true
    score:number = 0
    wasEadible: boolean

    onMessage(req: ReqRequest): HandlerResponse {
        console.log("start", this.wasEadible)
        let firstTurn = false
        if(this.gameOver){
            if(!this.checkCommand(req, "—Å—Ç–∞—Ä—Ç")){
                return {text: "–°–∫–∞–∂–∏—Ç–µ —Å—Ç–∞—Ä—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã", buttons:this.buttons(["–°—Ç–∞—Ä—Ç"])}
            }else {
                this.gameOver = false;
                this.score = 0;
                firstTurn = true
            }
        }
        let respText = ""
        let saidEadible: boolean
        console.log("before checks", this.wasEadible)
        if(this.checkCommand(req, "–Ω–µ—Å—ä–µ–¥–æ–±–Ω–æ–µ") || this.checkCommand(req, "–Ω–µ—Ç")){
            saidEadible = false
        }
        else if(this.checkCommand(req, "—Å—ä–µ–¥–æ–±–Ω–æ–µ") || this.checkCommand(req, "–¥–∞")){
            saidEadible = true
        }else if(!firstTurn){
            return {text: "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª–∞", buttons: this.buttons(["—Å—ä–µ–¥–æ–±–Ω–æ–µ", "–Ω–µ—Å—ä–µ–¥–æ–±–Ω–æ–µ"])}
        }
        console.log("after checks:", this.wasEadible)
        if(!firstTurn){
            if(saidEadible === this.wasEadible){
                respText += "–í—ã —É–≥–∞–¥–∞–ª–∏\n"
                this.score += 1
            }else {
                respText += "–í—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏\n"
                this.score = 0
            }
            respText += `–í–∞—à —Å—á—ë—Ç = ${this.score}\n`
        }

        this.wasEadible = Math.random() > 0.5
        let arr = this.wasEadible ? tasty : not_tasty
        let item = arr[Math.floor(Math.random()*arr.length)];

        respText += `–Ø –∫–∏–¥–∞—é –í–∞–º  ${item}\n`
        respText += "–°—ä–µ–¥–æ–±–Ω–æ–µ –∏–ª–∏ –Ω–µ—Å—ä–µ–¥–æ–±–Ω–æ–µ?\n"
        console.log(this.wasEadible, item)
        return {text: respText, buttons:this.buttons(["—Å—ä–µ–¥–æ–±–Ω–æ–µ", "–Ω–µ—Å—ä–µ–¥–æ–±–Ω–æ–µ"])}
    }
}